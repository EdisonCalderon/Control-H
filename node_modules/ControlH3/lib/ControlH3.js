'use strict';

var User = require('./user/user');
var WorkSpace = require('./workSpace/workSpace');
var Schedule =  require('./schedule/schedule');
var Project = require('./project/project');
var Backlog = require('./backlog/backlog');
var History = require('./history/history');
var Requirement = require('./requirement/requirement');
var utilities = require('./utilities');


function ControlH3 (){

}

/----------------------------------------------------- User managment and basic services  ------------------------------------------------/

ControlH3.prototype.signIn = function(name, password, date, mac, callback) {
	var user = {
		name : name, 
		password : password
	};

	User.getUserByNameAndPassword(user, function(err, userResult){
		if(err){
			return callback(err, null);
		}
		else{
			if (userResult == null) {
				callback("Invalid login name or password", null);
			}else if(!userResult.logged){
				var type = (!mac)?'house':'office';				
				var workSpace = {
					idUser : userResult._id,
					type : type,
					year : date.getFullYear(),
					month : date.getMonth() + 1,
					input : date	
				};

				WorkSpace.addWorkSpace(workSpace, function(err, result){
					if(err){
						return callback(err, null);
					}
					else if(!result){
						return callback("Could not add the worskpace", null);
					}
					else{
						userResult.logged = true;
						userResult.state = type;
						userResult.save();
						return callback(null,result);
					}
				});		
				
			}else{
				return callback("User already logged", null);			
			}
		}	
	});
};


ControlH3.prototype.signOut = function(name, password, date, mac, labored, callback) {
	var user = {
		name : name, 
		password : password
	};

	User.getUserByNameAndPassword(user, function(err, userResult){
		if(err){
			return callback(err, null);
		}
		else{
			if (!userResult) {
				callback("Invalid login name or password", null);
			}else if(userResult.logged){
				var type = (!mac)?'house':'office';
				if(userResult.state == type){					
					var workSpace = {
						idUser : userResult._id,
						output : date,
	   					labored : labored,
	   					finalised : true
					};
					WorkSpace.finalisedWorkSpace(workSpace, function(error, result){
						if(error){
							return callback(error, null);
						}else if(!result){
							return callback("Could not find the active workspace", null);
						}
						else{
							userResult.logged = false;
							userResult.state = 'out';
							userResult.save();
							return callback(null, result);
						}					
					});
					
				}
				else{
					return callback("You must log out from the same place where you were working ",null);
				}
			}
			else{
				return callback("You are not logged",null);
			}
		}
	});
};

ControlH3.prototype.passwordChange= function(form,callback){
	User.changePassword(form,function(err,result){
		if(err){
			callback(err, null);
		}else{			
			if(!result){
				return callback("User was not found",null);
			}	
			else{
				return callback(null,result);
			}
		}
	});
};

ControlH3.prototype.signUp = function(user, callback) {
	User.addUser(user, function(err, result){
		if(err){
			return callback(err, null);
		}else{
			return callback(null, result);
		}
	});
};

ControlH3.prototype.workingNow = function(callback){
	User.getUsersLoggedOn(function(err, result){
		if(err){
			return callback(err, null);
		}else{
			return callback(null, result);
		}
	});
};

ControlH3.prototype.hi= function(callback){
	console.log("hi, good day!!!");
	utilities.getHora(callback);
};

/--------------------------------------- Schedule managment : (Post, Get by user, Get All, and Patch)  -----------------------------------/ 

ControlH3.prototype.addSchedule= function(schedule,callback){
	var query = {
		_id : schedule.idUser
	};
	User.getUserByQuery(query,function(error,response){
		if(error){
			return callback(error,null);
		}else if (!response){
			return callback("The user does not exist", null);
		}else{
			controlh3.getSchedulesByIdUser(schedule.idUser, function(errorS, schedule){
				if(error){
					return callback(errorS, null);
				}else if(schedule){
					return callback("The user already has a schedule", null);
				}else{
					Schedule.addSchedule(schedule, function(err,result){
						if(err){
							return callback(err, null);
						}
						else{
							return callback(null, result);
						}
					});
				}
			});
		}

	});	
};

ControlH3.prototype.getSchedulesByIdUser= function(user,callback){
	var query = {
		_id : user
	};
	User.getUserByQuery(query,function(error,response){
		if(error){
			return callback(error,null);
		}else if (!response){
			return callback("There is no user with the ID provided", null);
		}else{
			Schedule.getSchedulesByIdUser(user,function(err,result){
				if(err){
					return callback(err,null);
				}else if(!result){
					return callback("The user do not have any registered shedule", null);
				}else{
					return callback(null,result);
				}
			});
		}
	});	
};

ControlH3.prototype.getAllSchedules = function(callback){
	Schedule.getSchedulesUsers(function(err,result){
		if(err){
			return callback(err,null);
		}else if(!result){
			return callback("No registered shedules", null);
		}else{
			return callback(null,result);
		}
	});
};

ControlH3.prototype.patchScheduleById = function(id, info, callback){
	Schedule.patchScheduleById(id,info, function(error,result){
		if(error){
			return callback(error, null);
		}else{
			return callback(null, result);
		}
	});
};

/------------------------------------------ Measurement ranges of hour work in different ways ---------------------------------------------/

ControlH3.prototype.getTotalHours = function(info, callback){
	var query = {
		idUser  : info.idUser,
		year  : info.year,
		month  : info.month,
		finalised : true
	}

	WorkSpace.getHoursByQuery(query, info.day, function(err,result){
		if(err){
			return callback(err,null);
		}else{
			return callback(null,result);
		}
	});
};

ControlH3.prototype.getHoursInDateRange = function (info, callback){
	var split_init = info.initDate.split(".");
	var initDateUTC= Date.UTC(split_init[2],split_init[0]-1,split_init[1]);
	var init_date = new Date(initDateUTC);
	init_date.setDate(init_date.getDate());

	var split_final = info.finalDate.split(".");
	var endDateUTC = Date.UTC(split_final[2],split_final[0]-1,split_final[1]);
	var end_date = new Date(endDateUTC);
	end_date.setDate(end_date.getDate()+1);
	
	var query = {		
		input: {
			$gte : init_date,
			$lt  : end_date 			
		},
		idUser: info.idUser,
		finalised: true
	}

	WorkSpace.getHoursByQuery(query, null, function (err, hours){		
		if(err){
			return callback(err, null);
		}
		else{
			User.getUserByQuery({_id: info.idUser}, function (err, user){
				if(err){
					return callback(err, null);			
				}
				else if(user == null){
					return callback("The user does not exist", null);
				}
				else{
					return callback(null, {user: user.name, horas: hours});
				}
			});
		}
	});
};

/------------------------------------------ Project managment : (Post, Get All , Get by id and Patch)  -----------------------------------/

ControlH3.prototype.addProject = function (info, callback){
	Project.addProject(info,function(error,response){
		if(error){
			return callback(error,null);
		}else {
			Backlog.addBacklog({projectId: response._id, type: "product", closed : false}, function(err, result){
				//Considerar armar una respuesta con los objetos proyecto y err en la creacion del backlog
				if(err){
					return callback({error: err, repose : response}, null);
				}
				else if(!result){
					return callback({error: "Project created, but not its product backlog. ", repose : response}, null);
				}
				else{
					return callback(null, response);
				}
			});			
		}
	});
};

ControlH3.prototype.getAllProjects = function(callback){
	Project.getProjects(function(error,response){
		if(error){
			return callback(error,null);
		}else if (!response){
			return callback("No registered Projects", null);
		}else{
			return callback (null, response);
		}
	});
};

ControlH3.prototype.getProjectById = function(idProject,callback){
	Project.getProjectById(idProject,function(error,response){
		if(error){
			return callback(error, null);
		}else if(!response){
			return callback("The requested project does not exist", null);
		}else{
			return callback(null,response);
		}
	});
};

ControlH3.prototype.patchProjectById = function(idProject, info, callback){
	Project.patchProjectById(idProject,info, function(error,response){
		if(error){
			return callback(error, null);
		}else if(!response){
			return callback("Could not find the project with the provided ID", null);
		}
		else{
			return callback(null, response);
		}
	});
};

/------------------------------------------ Backlog managment : (Post, Get All , Get by id and Patch)  -----------------------------------/

ControlH3.prototype.addBacklog = function(idProject, type, data, callback){	
	this.getProjectById(idProject, function(errorP, projectResult){
		if(errorP){			
			return callback(errorP, null);
		}
		else{			
			if(type == "product"){
				controlh3.getBacklogs(idProject, type, function(err, result){
					if(err){
						return callback(err, null);
					}
					else{
						if(result.length >= 1){
							return callback("The project already has a product backlog", null);
						}else{
							var info = {
								projectId : idProject,
								type : type,
								closed : data.closed
							}; 	
							Backlog.addBacklog(info, function(error, response){
								if(error){
									return callback(error, null);
								}else if(!response){
									return callback(null, null);
								}else{
									return callback(null, response);
								}
							});
						}
					}
				});
			}
			else{
				var info = {
					projectId : idProject,
					type : type,
					closed : data.closed
				}; 	
				Backlog.addBacklog(info, function(error, response){
					if(error){
						return callback(error, null);
					}else if(!response){
						return callback(null, null);
					}else{
						return callback(null, response);
					}
				});
			}			
		}
	});
};

ControlH3.prototype.getBacklogs = function(idProject, type,  callback){
	Backlog.getBacklogsByProjectIdAndType(idProject, type, function(error, response){
		if(error){
			return callback(error, null);
		}else if(!response){
			return callback("No Backlogs was found", null);
		}else{			
			return callback(null, response);
		}
	});
};

ControlH3.prototype.getBacklog = function(id, idProject, type, callback){
	Backlog.getBacklogByIdProjectAndType(id, idProject, type, function(error, response){
		if(error){
			return callback(error, null);
		}else if(!response){
			return callback("The specified backlog does not exist", null);
		}else{			
			return callback(null, response);
		}
	});
};

ControlH3.prototype.patchBacklog = function(id, idProject, type, data, callback){
	this.getBacklog(id, idProject, type, function(error, respose){
		if(error){
			return callback(error, null);
		}else{			
			Backlog.patchBacklogsById(id, data, function (err, result){
				if(err){
					return callback(err, null);
				}else if(!result){
					return callback(null, null);
				}else{			
					return callback(null, result);
				}
			});		
		}
	});
};
/------------------------------------------ Requirement managment : (Post, Get All , Get by id and Patch) --------------------------------------/

ControlH3.prototype.addRequirement = function(idProject, backlogType, idBacklog, data, callback){
	this.getBacklog(idBacklog, idProject, backlogType, function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			if(result.closed == false){
				if(data.idUser != undefined){
					var query = {
						_id : data.idUser
					};
					User.getUserByQuery(query,function(errUser,res){
						if(errUser){
							return callback(errUser, null);
						}
						else if(!res){
							return callback("The user does not exist", null);
						}
						else{
							data.backlogId = idBacklog;
							Requirement.addRequirement(data, function(error, response){
								if(error){
									return callback(error, null);
								}else if(!response){
									return callback("Could not add the requirement", null);
								}else{			
									return callback(null, response);
								}
							});
						}
					});
				}
				else{
					return callback("Missing idUser field (responsible)", null);
				}
			}
			else{
				return callback("You can not add requirements in a closed Backlog", null);
			}			
		}
	});
	
};

ControlH3.prototype.getRequirements = function(idProject, backlogType, idBacklog, callback){
	this.getBacklog(idBacklog, idProject, backlogType, function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			Requirement.getRequirementsByBacklogId(idBacklog, function(error, response){
				if(error){
					return callback(error, null);
				}else if(!response){
					return callback("The specified backlog has no requirements", null);
				}else{			
					return callback(null, response);
				}
			});
		}
	});	
};

ControlH3.prototype.getRequirement = function(id, idProject, backlogType, idBacklog,callback){
	this.getBacklog(idBacklog, idProject, backlogType, function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			Requirement.getRequirementById(id, function(error, response){
				if(error){
					return callback(error, null);
				}else if(!response){
					return callback("The requirement with the provided ID was not found", null);
				}else{			
					return callback(null, response);
				}
			});
		}
	});		
};

ControlH3.prototype.patchRequirement = function(id, idProject, backlogType, idBacklog, data, callback){
	this.getBacklog(idBacklog, idProject, backlogType, function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			if(data.idUser != undefined){
				var query = {
					_id : data.idUser
				};
				User.getUserByQuery(query,function(errUser,res){
					if(errUser){
						return callback(errUser, null);
					}
					else if(!res){
						return callback("The user does not exist", null);
					}else{
						Requirement.reassignRequirement(id, data, function(errReq, requierementR){
							if(errReq){
								return callback(errReq, null);
							}else if(!requierementR){
								return callback("The requirement with the provided ID was not found", null);
							}else{			
								return callback(null, requierementR);
							}
						});
					}
				});
			}else{
				Requirement.patchRequirementById(id, data, function(error, response){				
					if(error){
						return callback(error, null);
					}else if(!response){
						return callback("The requirement with the provided ID was not found", null);
					}else{			
						return callback(null, response);
					}
				});
			}
		}
	});	
}; 

/------------------------------------------ History managment : (Post, Get All , Get by id and Patch)  -----------------------------------/

ControlH3.prototype.addHistory = function(idProject, idBacklog, data, callback){
	this.getBacklog(idBacklog, idProject, 'product', function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			if(result.closed == false){
				data.backlogId = idBacklog;
				History.addHistory(data, function(error, response){
					if(error){
						return callback(error, null);
					}else if(!response){
						return callback("Could not add the requirement", null);
					}else{			
						return callback(null, response);
					}
				});					
			}
			else{
				return callback("You can not add histories in a closed Backlog", null);
			}			
		}
	});
	
};

ControlH3.prototype.getHistories = function(idProject, idBacklog, callback){
	this.getBacklog(idBacklog, idProject, 'product', function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			History.getHistoriesByBacklogId(idBacklog, function(error, response){
				if(error){
					return callback(error, null);
				}else if(!response){
					return callback("The specified backlog has no histories", null);
				}else{			
					return callback(null, response);
				}
			});
		}
	});	
};

ControlH3.prototype.getHistory = function(id, idProject, idBacklog, callback){
	this.getBacklog(idBacklog, idProject, 'product', function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			History.getHistoryById(id, function(error, response){
				if(error){
					return callback(error, null);
				}else if(!response){
					return callback("The history with the provided ID was not found", null);
				}else{			
					return callback(null, response);
				}
			});
		}
	});		
};

ControlH3.prototype.patchHistory = function(id, idProject, idBacklog, data, callback){
	this.getBacklog(idBacklog, idProject, 'product', function(err, result){
		if(err){
			return callback(err, null);
		}
		else{
			History.patchHistoryById(id, data, function(error, response){				
				if(error){
					return callback(error, null);
				}else if(!response){
					return callback("The history with the provided ID was not found", null);
				}else{			
					return callback(null, response);
				}
			});
		}		
	});	
}; 


var controlh3 = module.exports = exports = new ControlH3;