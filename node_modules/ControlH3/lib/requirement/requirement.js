var RequirementSchema = require('../models/requirementSchema');

function Requirement(){

}

Requirement.prototype.addRequirement= function(info, callback){ 
    var data = {
        backlogId : info.backlogId,
        idUser : info.idUser,
        task : info.task,
        detail : info.details,
        coments : info.coments,
        remainingTime : info.remainingTime,
        priority : info.priority,
        status : info.status
    }; 
    
    var requirement= new RequirementSchema(data);
    requirement.save(function(error, response){
        if(error){
            return callback(error,null);            
        }
        else{
            if(!response){
                return callback(null,null);             
            }
            else{
                return callback(null,response);
            }
        }
    });
};

Requirement.prototype.getRequirementsByBacklogId = function(idBacklog, callback){
    RequirementSchema.find({backlogId : idBacklog}, function(error,response){
        if(error){
            return callback(error,null);            
        }
        else{
            if(!response){
                return callback(null,null);             
            }
            else{
                return callback(null,response);
            }
        }
    });
};

Requirement.prototype.getRequirementById = function(id, callback){
    RequirementSchema.findOne({_id : id}, function(error,response){
        if(error){
            return callback(error,null);            
        }
        else{
            if(!response){
                return callback(null,null);             
            }
            else{
                return callback(null,response);
            }
        }
    });
};

Requirement.prototype.patchRequirementById = function(id, info, callback){
    this.getRequirementById(id, function(error, requirement){        
        if(error){
            return callback(error, null);
        }
        else if(!requirement){
            return callback(null, null);
        }
        else{     
            if(requirement.status == "Discarded"){
                return callback("You can not modify a discarded requirement", null);
            }
            else if(requirement.status == "Reassigned"){
                return callback("You can not modify a reassigned requirement", null);
            }
            else{
                if(info.idUser != undefined) requirement.idUser = info.idUser;       
                if(info.details != undefined) requirement.details = info.details;
                if(info.comments != undefined) requirement.comments = info. comments;
                if(info.remainingTime != undefined) requirement.remainingTime = info.remainingTime;
                if(info.priority != undefined) requirement.priority = info.priority;
                if(info.status != undefined) requirement.status = info.status;
                requirement.save(function(err, response){
                    if(err){
                        return callback(err, null);
                    }else {
                        return callback(null,response);
                    }
                });                
            }
        }
    });
};

Requirement.prototype.reassignRequirement = function(id, data, callback){
    this.getRequirementById(id, function(error, requirement){
        if(error){
            return callback(error, null);
        }
        else if(!requirement){
            return callback(null, null);
        }
        else{
            if(requirement.idUser == data.idUser){
                Requirement.patchRequirementById(requirement._id, data, function(err, result){
                    if(err){
                        return callback(err, null);
                    }else if(!result){
                        return callback("It was not possible to generate the new requirement", null);
                    }else{
                        return callback(null, result);
                    }
                });
            }
            else{
                if(requirement.status == "Discarded"){
                    return callback("You can not reassign a discarded requirement", null);
                }
                else if(requirement.status == "Reassigned"){
                    return callback("You can not reassign a reassigned requirement", null);
                }
                else{
                    var status = requirement.status;
                    requirement.status = "Reassigned";
                    requirement.save(function(errorSave, res){
                        if(errorSave){
                            return callback(errorSave, null);
                        }
                        else if(!res){
                            return callback("Cant Discard last Requirement", null);
                        }
                        else{
                            var infoNewRequirement= res.toJSON();
                            delete infoNewRequirement._id;
                            infoNewRequirement.status = status;
                            Requirement.addRequirement(infoNewRequirement, function(errModify, requirementModified){
                                if(errModify){
                                    return callback(errModify, null);
                                }
                                else if(!requirementModified){
                                    return callback("It was not possible to generate the new requirement", null);
                                }
                                else{
                                    Requirement.patchRequirementById(requirementModified._id, data, function(err, result){
                                        if(err){
                                            return callback(err, null);
                                        }else if(!result){
                                            return callback("It was not possible to generate the new requirement", null);
                                        }else{
                                            return callback(null, result);
                                        }
                                    });
                                }
                            }); 
                        }
                    });                    
                } 
            }                                          
        }
    });
}

var Requirement= module.exports= new Requirement();